export function KursJsBlock4() {
    return (<>
        <p> Функции </p>
        <p>Зачастую нам надо повторять одно и то же действие во многих частях программы. </p>

        <p>Например, необходимо красиво вывести сообщение при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь.</p>

        <p>Чтобы не повторять один и тот же код во многих местах, придуманы функции. Функции являются основными «строительными блоками» программы.</p>

        <p>Примеры встроенных функций вы уже видели – это alert(message), prompt(message, default) и confirm(question). Но можно создавать и свои.</p>

        <p>Объявление функции</p>
        <p></p>

        <p>    Пример объявления функции:</p>
        <pre><code>{`function showMessage() {
  alert( 'Всем привет!' );
}`}</code></pre>

        <p>Вначале идёт ключевое слово function, после него имя функции, затем список параметров в круглых скобках через запятую (в вышеприведённом примере он пустой) и, наконец, код функции, также называемый «телом функции», внутри фигурных скобок.</p>
        <pre><code>{`function имя(параметры) {
  ...тело...
}`}</code></pre>

        <p>    Наша новая функция может быть вызвана по своему имени: showMessage().</p>
        <p>Например:</p>
        <pre><code>{`function showMessage() {
  alert( 'Всем привет!' );
  
showMessage();
showMessage();
}`}</code></pre>

        <p>Вызов showMessage() выполняет код функции. Здесь мы увидим сообщение дважды.</p>

        <p>Этот пример явно демонстрирует одно из главных предназначений функций: избавление от дублирования кода.</p>

        <p>Если понадобится поменять сообщение или способ его вывода – достаточно изменить его в одном месте: в функции, которая его выводит.</p>

        <p>Локальные переменные</p>
        <p>Переменные, объявленные внутри функции, видны только внутри этой функции.</p>

        <p>Например:</p>
        <pre><code>{`function showMessage() {
  let message = "Привет, я JavaScript!"; // локальная переменная

  alert( message );
}

showMessage(); // Привет, я JavaScript!

alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри функции
Внешние переменные`}</code></pre>

        <p>У функции есть доступ к внешним переменным, например:</p>
        <pre><code>{`let userName = 'Вася';

function showMessage() {
  let message = 'Привет, ' + userName;
  alert(message);
}

showMessage(); // Привет, Вася`}</code></pre>

        <p>Функция обладает полным доступом к внешним переменным и может изменять их значение.</p>

        <p>Например:</p>

        <pre><code>{`let userName = 'Вася';

function showMessage() {
  userName = "Петя"; // (1) изменяем значение внешней переменной

  let message = 'Привет, ' + userName;
  alert(message);
}

alert( userName ); // Вася перед вызовом функции

showMessage();

alert( userName ); // Петя, значение внешней переменной было изменено функцией
Внешняя переменная используется, только если внутри функции нет такой локальной.`}</code></pre>

        <p>Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю. Например, в коде ниже функция использует локальную переменную userName. Внешняя будет проигнорирована:</p>

        <pre><code>{`let userName = 'Вася';

function showMessage() {
  let userName = "Петя"; // объявляем локальную переменную

  let message = 'Привет, ' + userName; // Петя
  alert(message);
}

// функция создаст и будет использовать свою собственную локальную переменную userName
showMessage();

alert( userName ); // Вася, не изменилась, функция не трогала внешнюю переменную
`}</code></pre>
        <p>Параметры</p>
        <p>Мы можем передать внутрь функции любую информацию, используя параметры.</p>

        <p>В нижеприведённом примере функции передаются два параметра: from и text.</p>

        <pre><code>{`function showMessage(from, text) { // параметры: from, text
  alert(from + ': ' + text);
}

showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)`}</code></pre>
        <p>Когда функция вызывается в строках (*) и (**), переданные значения копируются в локальные переменные from и text. Затем они используются в теле функции.</p>

        <p>Вот ещё один пример: у нас есть переменная from, и мы передаём её функции. Обратите внимание: функция изменяет значение from, но это изменение не видно снаружи. Функция всегда получает только копию значения:</p>
        <pre><code>{`function showMessage(from, text) {

from = '*' + from + '*'; // немного украсим "from"

alert( from + ': ' + text );
}

let from = "Аня";

showMessage(from, "Привет"); // *Аня*: Привет

// значение "from" осталось прежним, функция изменила значение локальной переменной
alert( from ); // Аня`}</code></pre>

        <p>Значение, передаваемое в качестве параметра функции, также называется аргументом.</p>

        <p></p>
        <ul>
            <li>
                Параметр – это переменная, указанная в круглых скобках в объявлении функции.
            </li>
            <li>
                Аргумент – это значение, которое передаётся функции при её вызове.
            </li>
            <li>
                Мы объявляем функции со списком параметров, затем вызываем их, передавая аргументы.
            </li>
        </ul>

<p>Рассматривая приведённый выше пример, мы могли бы сказать: `функция showMessage объявляется с двумя параметрами, затем вызывается с двумя аргументами: from и `Привет``.</p>
        

        <p>Значения по умолчанию</p>
        <p>Если при вызове функции аргумент не был указан, то его значением становится undefined.</p>

        <p>Например, вышеупомянутая функция showMessage(from, text) может быть вызвана с одним аргументом:</p>
<pre><code>{` showMessage("Аня");`}</code></pre>
        <p>Это не приведёт к ошибке. Такой вызов выведет `*Аня*: undefined`. В вызове не указан параметр text, поэтому предполагается, что text === undefined.</p>

        <p>Если мы хотим задать параметру text значение по умолчанию, мы должны указать его после =:</p>
<pre><code>{`function showMessage(from, text = "текст не добавлен") {
   alert(from + ": " + text);
}

showMessage("Аня"); // Аня: текст не добавлен`}</code></pre>
        
        <p>Теперь, если параметр text не указан, его значением будет `текст не добавлен`</p>

        <p>В данном случае `текст не добавлен` это строка, но на её месте могло бы быть и более сложное выражение, которое бы вычислялось и присваивалось при отсутствии параметра. Например:</p>

       <pre><code>{` function showMessage(from, text = anotherFunction()) {
            // anotherFunction() выполнится только если не передан text
            // результатом будет значение text
}`}</code></pre>

    </>)
}