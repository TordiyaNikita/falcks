export function KursJsBlock3() {
    return (<>
        <p>Объекты</p>
        <p>Как мы знаем из главы Типы данных, в JavaScript существует 8 типов данных. Семь из них называются «примитивными», так как содержат только одно значение (будь то строка, число или что-то другое).</p>
        <p>Объекты же используются для хранения коллекций различных значений и более сложных сущностей. В JavaScript объекты используются очень часто, это одна из основ языка. Поэтому мы должны понять их, прежде чем углубляться куда-либо ещё.</p>
        <p>Объект может быть создан с помощью фигурных скобок {`{…}`} с необязательным списком свойств. Свойство – это пара «ключ: значение», где ключ – это строка (также называемая «именем свойства»), а значение может быть чем угодно.</p>
        <p>Мы можем представить объект в виде ящика с подписанными папками. Каждый элемент данных хранится в своей папке, на которой написан ключ. По ключу папку легко найти, удалить или добавить в неё что-либо.</p>
        <p>Пустой объект («пустой ящик») можно создать, используя один из двух вариантов синтаксиса:</p>
        <pre><code>{`let user = new Object(); // синтаксис "конструктор объекта"
let user = { };  // синтаксис "литерал объекта"`}</code></pre>
        <p>Обычно используют вариант с фигурными скобками  {`{…}`}. Такое объявление называют литералом объекта или литеральной нотацией.</p>
        <p>Литералы и свойства</p>
        <p>При использовании литерального синтаксиса {`{…}`} мы сразу можем поместить в объект несколько свойств в виде пар «ключ: значение»:</p>
        <pre><code>{`let user = {     // объект
    name: "John",  // под ключом "name" хранится значение "John"
    age: 30        // под ключом "age" хранится значение 30
};`}</code></pre>
        <p>У каждого свойства есть ключ (также называемый «имя» или «идентификатор»). После имени свойства следует двоеточие `:, и затем указывается значение свойства. Если в объекте несколько свойств, то они перечисляются через запятую.</p>
        <p>В объекте user сейчас находятся два свойства:</p>
        <ul>
            <li>Первое свойство с именем `name` и значением `John``.</li>
            <li>Второе свойство с именем `age` и значением 30.</li>
        </ul>
        <p>Можно сказать, что наш объект user – это ящик с двумя папками, подписанными «name» и «age».</p>
        <p>Мы можем в любой момент добавить в него новые папки, удалить папки или прочитать содержимое любой папки.</p>
        <p>Для обращения к свойствам используется запись «через точку»:</p>
        <pre><code>{`alert( user.name ); // John
alert( user.age ); // 30`}</code></pre>
        <p>Значение может быть любого типа. Давайте добавим свойство с логическим значением:</p>
        <pre><code>{`user.isAdmin = true;`}</code></pre>
        <p>Для удаления свойства мы можем использовать оператор delete:</p>
        <pre><code>{`delete user.age;`}</code></pre>
        <p>Имя свойства может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки:</p>
        <pre><code>{`let user = {
    name: "John",
    age: 30,
    "likes birds": true  // имя свойства из нескольких слов должно быть в кавычках
};`}</code></pre>
        <p>Последнее свойство объекта может заканчиваться запятой:</p>
        <pre><code>{`let user = {
    name: "John",
    age: 30,
}`}</code></pre>
        <p>Это называется «висячая запятая». Такой подход упрощает добавление, удаление и перемещение свойств, так как все строки объекта становятся одинаковыми.</p>
        <p>Квадратные скобки</p>
        <p>Для свойств, имена которых состоят из нескольких слов, доступ к значению «через точку» не работает:</p>
        <pre><code>{`// это вызовет синтаксическую ошибку
user.likes birds = true `}</code></pre>
        <p>JavaScript видит, что мы обращаемся к свойству user.likes, а затем идёт непонятное слово birds. В итоге синтаксическая ошибка.</p>
        <p>Точка требует, чтобы ключ был именован по правилам именования переменных. То есть не имел пробелов, не начинался с цифры и не содержал специальные символы, кроме $ и _.</p>
        <p>ля таких случаев существует альтернативный способ доступа к свойствам через квадратные скобки. Такой способ сработает с любым именем свойства:</p>
        <pre><code>{`let user = { };
// присваивание значения свойству
user["likes birds"] = true;
// получение значения свойства
alert(user["likes birds"]); // true
// удаление свойства
delete user["likes birds"];`}</code></pre>
        <p>Сейчас всё в порядке. Обратите внимание, что строка в квадратных скобках заключена в кавычки (подойдёт любой тип кавычек).</p>
        <p>Квадратные скобки также позволяют обратиться к свойству, имя которого может быть результатом выражения. Например, имя свойства может храниться в переменной:</p>
        <pre><code>{`let key = "likes birds";
// то же самое, что и user["likes birds"] = true;
user[key] = true;`}</code></pre>
        <p>Здесь переменная key может быть вычислена во время выполнения кода или зависеть от пользовательского ввода. После этого мы используем её для доступа к свойству. Это даёт нам большую гибкость.</p>
        <p>Пример:</p>
        <pre><code>{`let user = {
    name: "John",
    age: 30
};
let key = prompt("Что вы хотите узнать о пользователе?", "name");
// доступ к свойству через переменную
alert( user[key] ); // John (если ввели "name")`}</code></pre>
        <p>Запись «через точку» такого не позволяет:</p>
        <pre><code>{`let user = {
    name: "John",
    age: 30
};
let key = "name";
alert( user.key ); // undefined`}</code></pre>
        <p>Вычисляемые свойства</p>
        <p>Мы можем использовать квадратные скобки в литеральной нотации для создания вычисляемого свойства.</p>
        <pre><code>{`let fruit = prompt("Какой фрукт купить?", "apple");
let bag = {
    [fruit]: 5, // имя свойства будет взято из переменной fruit
};
alert( bag.apple ); // 5, если fruit="apple"`}</code></pre>
        <p>Смысл вычисляемого свойства прост: запись [fruit] означает, что имя свойства необходимо взять из переменной fruit.</p>
        <p>И если посетитель введёт слово `apple`, то в объекте bag теперь будет лежать свойство{`{apple: 5}`} .</p>
        <p>По сути, пример выше работает так же, как и следующий пример:</p>
        <pre><code>{`let fruit = prompt("Какой фрукт купить?", "apple");
let bag = { };
// имя свойства будет взято из переменной fruit
bag[fruit] = 5;`}</code></pre>
        <p>…Но первый пример выглядит лаконичнее.</p>
        <p>Мы можем использовать и более сложные выражения в квадратных скобках:</p>
        <pre><code>{`let fruit = 'apple';
let bag = {
    [fruit + 'Computers']: 5 // bag.appleComputers = 5
};`}</code></pre>
        <p>Квадратные скобки дают намного больше возможностей, чем запись через точку. Они позволяют использовать любые имена свойств и переменные, хотя и требуют более громоздких конструкций кода.</p>
        <p>Подведём итог: в большинстве случаев, когда имена свойств известны и просты, используется запись через точку. Если же нам нужно что-то более сложное, то мы используем квадратные скобки.</p>
        <p>Свойство из переменной</p>
        <p>В реальном коде часто нам необходимо использовать существующие переменные как значения для свойств с тем же именем.</p>
        <p>Например:</p>
        <pre><code>{`function makeUser(name, age) {
    return {
        name: name,
        age: age
        // ...другие свойства
    };
    let user = makeUser("John", 30);
alert(user.name); // John</code></pre>`}</code></pre>
        <p>В примере выше название свойств name и age совпадают с названиями переменных, которые мы подставляем в качестве значений этих свойств. Такой подход настолько распространён, что существуют специальные короткие свойства для упрощения этой записи.</p>
        <p>Вместо name:name мы можем написать просто name:</p>
        <pre><code>{`function makeUser(name, age) {
    return {
        name, // то же самое, что и name: name
            age   // то же самое, что и age: age
            // ...
        };
}`}</code></pre>
        <p>Мы можем использовать как обычные свойства, так и короткие в одном и том же объекте:</p>
        <pre><code>{` let user = {
            name,  // тоже самое, что и name:name
            age: 30`}</code></pre>
    </>)
}